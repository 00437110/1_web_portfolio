0 00 we will work with the components to be rendered in the appropiate parent component

0 25 The App component is the top one. Everything is a child to App.

0 40 It will be a child to App the first rendered one. 

Get rid of react fragments.

0 55 we will develop the Layout component and we exported it as the default export from this JSX file

1 05 we will render the componente as a html file

we call layout and it should come automatically and import it to our progrm

2 00 header and footer will be in the layout

2 20 inside the layout will be the main section

2 35 When building react.js applications, you can 
start with the component tree. 
Then write all the 
static content, 
style it and 
then make it interactive

* 3 40 * In a componente tree, Having opening and closing tag for a component is only done if it expects children components

<Grid> </Grid> - Expect Children component, which are 
<Grid />  - Self closing, no children expected

In this example, the grid is going to have contents, but it will NOT be a wrapper

All of its content is specific to the Grid

3 57 The layout has a lot of content that is written all throughout the rest of the document, so it needs to expect children

4 10 the Grid can be self closing. All content jsx in Grid will be rendered here in main

4 35 Omn the main we have Grid and it's all within the layout
App.jsx will look like this

5 00 working on Grid, it will render all of our local cards and our modal

 it will allow the users to click the info button and see the information of the exercise

5 50 we can try adding text to see what happens

it won't show up

We need to modify the Layout.jsx+

6 10 in layout.jsx, the layout is empty.

*It has children content in its main
*It is information being passed to the layout
*In layout we haven't told it what it is supposed to do with that children content and how it is meant to be rendered on the screen

6 40 We need to tell the  Layout content to expect the children component  and then wher it should place it on screen

6 50 we use PROPERTIES in order to communicate information between components

theres two type

1- Attribute style of property
2- Children style of property  

Children are the children contents of the component

We don't have to meddle with how the main renders children contents, but since we do have a component wrapping our entire application, we need to tell it how to deal with that children.

<Layout>

      <main>
        <Grid/>


      </main>

    </Layout>


7 25 we're communicating some children content to the layout, and for it to expect it is via props

it comes as an argument, like this. We are telling Layout that it will have some children and attribute props.

export default function Layout(props){

7 55 before the return of layout we need to add:
 const {children } = props

8 15 now we tell the Layout.jsx how to render the children content
we can use it in the jsx

return (
        <>
        {children}

        </>
    )

8 50 Layout receives the children Grid, but we hadn't told it, what to do with the property itself, so it is now rendered. We destructured it, and rendered in layout

9 25 Layout is a wrapper of our app, and the layout is the main content

Outside the main content is header and footer

9 50 we can create a header and footer, above and below our {children} render

10 00 we can refactor this code
const header can be used to create the header and work it outside our return

then we add it with {} 

 {header}
            {children}
            {footer}

10 45 {header} will inject the html in the const header

11 00 now we can write header and footer in the const and it will be rendered the same

11 30 now we create an h1
<h1 className="text-gradient" >The Brogram</h1>

12 00 <p><strong> The 30 Simple Workout Program </strong> </p>

12 20 now it will be rendered fully 

12 40 now in the footer we attribute the project to one self
const footer = (

        <footer>
            <p>Built by <a href="" target="_blank">Erick </a><br/>
            Styled with <a href="https://fantacss.smoljames.com/" target="_blank">FantaCSS</a>
            </p>
        </footer>
    )

15 20 styling is automatically applied 

15 30 we will create a new component called Hero.jsx

16 58 react fragments work as empty divs <></>

any singular react component can only return one component, so we use them so it returns one parent level component.

16 30 an empty div lets you return a lot of content, and not have to wrap it inside of a parent tag

16 50 Hero will have all the text needed to introduce our plan

it's good practice when creating your own landing pages.  we need to communicate and appeal to the users

17 15 to write a good landing page, is a speaking to their pain points and try to get them to what they desier

if you want to get into lifting, it is difficult, the outcome is that people will get shredded

we will speak both those things

18 05 add an h5 tag, small text <h5>Complete this training program to get SHREDDED</h5>

18 35 we will list all the benefits with ol and il

*18 45 we DO NOT use classes inside of react, because classes are reserved keywords

we use className attribute, with Name capitalized

it is the only and main change
add this list
<ol className="benefits=list"> 
            <li>Follow a simple program with great results: </li>
            <li>Get fit, healthy, and shredded</li>
            <li>Learn more of the gym, come for the trainning</li>
            <li>Become a life time gym browth, it is for change ❤</li>

        </ol>

20 20 after writing our list of information, we need to add Hero to the components of Layout in App.jsx

<Layout>

      <main>
        <Hero/>
        <Grid/>
      </main>

    </Layout>

Now we can see the list in our website

21 20 we will continue in Hero
 <ul className="rule-list">
            <li className="rules-item"> 
                <p><b>Rest</b></p>
                <p>Ensure you are taking rest days when necessary</p>
            </li>
            <li className="rule-item"> 
                <p><b>Reps</b></p>
                <p>Every rep is a pause rep following a </p>
            </li>

        </ul>

24 20 we will use a abbreviation tag for the 2-2-2 tempo text

it will underline the text after the title attribute to the opening abbreviation tag

add title="" and it will show up in our website

25 25 we have a third item <li> to add.

26 10 we have to fix the list. Select all the li items in the list with alt key while selecting the li's. we will change them to div

26 55 outside the list add a small tag with the text
* The first and second set should be at 75% and 85% of 
                your working weight used by your last 2 sets

27 40 underneath the small element add 
<h3>The training plan: </h3>
            <p>This traninig plan uses a structure known as <b>Bro Split </b>, and follows this rotation ⭐</p>
            <p><b><i>Push &rarr; Pull &rarr; Legs &rarr; Repeat</i></b></p>

&rarr; is a right pointing arrow

29 30 Las paragraph for this page

