0 00 workout grid will contain the workout component, will go in the Grid.jsx component, it has our test text

it is below the rest of the information

0 20 Remove the test text and add a div to return.

The div will be used because they will contain all the individual cards that we will work with

if the user clicks on one card, it will change from a card to the workout display

0 55 the div will have some styles, it will have columns and the grid will change with interactions

1 15 div className = :<div className="training-grid-plan">

1 30 we need to render several buttons, we can use a component

react can help render 1 and then duplicate it 30 times

1 55, in the div, we use

{}

we access the training plan adn we map over the training plan, and for every element in the training plan, we return etither the workout card

 or in the case where the user has already clicked on that particular button

or we render out a button which would allow the user to select it, and then consequently change the workout card to be that particular workout.

2 28 we will import the training plan  and destructure it and assign it to a variable called training_plan

we take the pogram and rename it 

import {workoutProgram as training_plan} from '../utils/index.js'

3 25 this is an object that we need to convert into an array

we have access to training_plan and we will map it,  with the
objects.key method.

We will pass in the object and it is going to return an array of all the keys, which is all the individual workouts

3 40 Then we can map the objects.key(training_plan) array. We will use a callback function or arrow function of 

()=>{} 

type

(workout,workoutIndex) =>
{

}

3 50 The arguments are workout and workoutIndex,
and we will return a <button>


4 00 To render a lot of items, you need to give the top level return element a key attribute and it has to be a unique value

we will use the workoutIndex.

Then we add contents to the button

4 15 This button will have a div with className='plan-card-header'

4 30 add a p tag to indicate the day of workout, from 1 to 30. We will use javascript, so we will use the {} and ()

{()} 

we will check if it is a single digit day or not

DO NOT separate return ( as 2 lnes. Always in the same line:
DO
return ( 

NOT 
return
(

It should look like this
import { workoutProgram as training_plan } from '../utils/index.js'

export default function Grid() {
    return (
        <div className="training-grid-plan"> 
            {Object.keys(training_plan).map((workout, workoutIndex) => {
                return(
                    <button key={workoutIndex}>
                        <div className='plan-card-header'>
                             <p>Day {((workoutIndex / 8) <= 1 ) ? '0' + (workoutIndex +1) : workoutIndex + 1 }</p>
                        </div>
                    </button>
                )

            })}


        </div>
    )
}


5 00 The check will see which day we are

6 00 A top the function return add:
const isLocked = false 

it will lock the card in case the user hasn't gotten to that day
it will display a lock in such card

6 35 we will use a const right now, but later it will be changed to a stateful variable

//case 1 if true, case 2 if false

7 40 the secondary () will have

workoutIndex % 3 === 0 ? (): () 

for the workouts repeat 3 days each

8 30 if true, we will have an icon that says

9 40 we will determine what icon of the 4 ones to use
dumbbell
hanging weight
bolt
locked

if it is meant to be locked, we will use a lock icon, otherwise we will use an icon of any of the 3 exercises, depending on the day

10 40 nothing comes up, because we haven't allowed icons to be used

10 55 we need to go to font-awesome and copy its link tag, then we add in index.html the tag for the font-awesome, like in the portfolio.

we will copy the link tag in the head

11 00 it will show icons, repeating of the exercises to be done

12 20 if we change the isLocked variable from false to true, we will see only locks

as we have locked the elements and show it cannot be used

jsx can makke some conditional displays straight inside of the html, making the jsx 

13 00 we will create a secondary div underneath our buttons, like this:
<div className='plan-card-header'>
                            <h4><b>{type}</b></h4>
                        </div>

type is not currently accessible

13 30 in the return of the button we will see the type from the index.

In every element, before we create the button we will get its type, we will see if it is a pull up or push up day

13 50 we will use
const type = workoutIndex % 3 === 0 ? 
                'Push' : 
                workoutIndex % 3 === 1 ? 
                'Pull' : 
                'Legs'

it is an arrow function or callback function, you can write some java, it will calculate everyday of the plan:, it will be similar to the button we created

with this, in  <h4><b>{type}</b></h4> we will render the type of workout

16 20 getting the workout: in a new constant we will see they're saved in the dictionary and assigned a particular index.

The index starts at 0

this will be the key to look for theworkout in the dictionary

  const trainingPlan = training_plan[workoutIndex]

17 40 const selected workout
when a user clicks on a workout, we will take the index of that entry and save it in that variable. 
we start it at 0

18 05 we can run a check to see if the selected workout is the same as the workout index, and thus we will be showing the workout card, not the button since the button has been already selected

<div className="training-grid-plan">
            {Object.keys(training_plan).map((workout, workoutIndex) => {

...
const trainingPlan = training_plan[workoutIndex] // it will give the training plan of the day

                if (workoutIndex === selectedWorkout){
                    return (
                        <WorkoutCard/>
                    )
                }

this way we can show the workout card

19 00 import WorkoutCard

19 10 in the implementation, Day 01 has gone away because day 1 has an index of 0

we will be actually displayin the workout card, which is empty, you can test it with random text

19 30 because we are retunring it from this card, we need the key to identify it

if we hit this return with the workout card, we will get out of the function for the array
 
20 00 conditional styling onf the elements

drop he opacity emblem, so it is not as bright, so they're not available to click

jsx can be done with javascript

20 30 the button atop will have a classname, but with a javascript fnction

return (
                    <button className={} key={workoutIndex}>

so now we will use javascript to give it a name

                    <button className={'card plan-card '+ (isLocked ? 'inactive' : '')} key={workoutIndex}>

it will give them a name that varies wether it is locked or not

22 40 we will display the workout card with some static or fixed data