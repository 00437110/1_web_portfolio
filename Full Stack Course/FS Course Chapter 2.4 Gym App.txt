0 00 we will work with the card component WorkoutCard

export default function WorkoutCard() {
    return (
        <div>

            
        </div>
    )
}

0 39 we will use props for it

it needs to be confirgured to receive such information, adding props to the WorkoutCard function

we destructure it, using const{} = props, the training plan, workoutIndex, type

 const {trainingPlan, workoutIndex, type} = props

1 40 to design the component, we need these 3 pieces of information



1 50 we render the workoutcard when the workoutIndex equals the selectedWorkout

we go thru all the workouts and check the index. if the index matches the selected workotut

otherwise, we display the button that a user can click to ,then open that workout if it is unlocked

we need to pass some attribute style props

we need to create attributes on the owkrout tag card

training plan will get the training plan from the workoutindex

trainingPlan = {trainingPlan}
Prop = 

we find the value at our current workout index, and that is going to be that particular workout

2 50 if index is 10, we are in day 11. 

it has warmup and workout. we will get access to that training plan

3 20 we will pass type because it expects it

index of 4, it is day 5 and it is skipped. We will display the workout card here

5 00 we need to get access to the warmup and the workout

we destructure the trainingPlan

 const { warmup, workout} = trainingPlan || {}

if we use this syntax, we can avoid problems in case training plan is undefined.

if training plan exist we destrucutre it, we default to an empty object if it doesn't exist

we won't break our code this way

6 20 it's a small security addition

we create now:

<div className="workout-card card">
</div>

it has a secondary class "card", it will default to card, and then add extra css with "workout-card"

7 30 <div className="plan-card-header">  will have the name and the contents for the workout

8 00 into an a dayNum and icon we will inject the information that we need

we have calculated in the grid for every workout card

we will pass those icon and dayNum to the component as attribute style props properties of this particular component

8 40, we will destructure them from this prop, but we need to add them in grid.jsx

9 05 we are calculating the day below the workout card. We will refactor the code, and extract the logic for the icon and they dayNum and it will be asigned to variables above so they can be used for both parts

9 35 we will create const dayNum with the logic that we used before

10 35 for the icon, we do not need the lock, but we need the rest
lock cannot be changed by a locked day yet

we do not need the lock icon, because they cannot open up a workout card on a locked day

10 50 what we need is the stuff between the parenthesis, in the section AFTER it has been determined the button is not locked

11 10 that logic can be set in this icon

the icon will be set to a conditional check, which will be the icon to be used

11 35 since the output is an icon,  youi can just replace the logic in the fucntion to an icon variable

11 50 icon now can be passed as a prop

12 00 you can assign html as a variable,  like in the header in layout:

we also add the dayNum to the props for workout card

13 40 create another plan-card-header div in the workouttcard

14 35 underneath that we will add the workout plan, inside the workout-container
<div className="workout-grid">
                <div className="exercise-name">
                    <h4>Warmup</h4>
                </div>
            </div>

15 25 the content will be a banner.

It will be a banner for our current workout

some elements will sit atop the background color

15 50 below the div of workout, we will add h6 tags

16 50 beneath this, we will display the information:

warmup is an array con objects that specify each warmup

every index is an entire training plan

we will map every array and we will do it with repeated jsx

17 35 we have to get an array, we will use a callback function
{warmup.map((warmupExercise, warmupIndex) => {})}

with each being an item and its key

18 25 We will return some react fragments in this case, but we need to assign them a key. Assigning a key in empty fragments won't work

18 55 we will specifically use
<React.Fragment></React.Fragment>

they can be given style attribute props

19 20 warmupIndex is guaranteed to be unique for a key

20 24 we will add the name and description of the exerise
<p>{warmupIndex + 1 }</p> because it starts at 0
then we add the name

21 00 we have the warmupExercise name

21 45 we will turn this into a table

we have the react fragments to render them out

for each warm up exercise we will render 4 top elements

22 35 we added
                            <p className="exercise-info">{warmupExercise.sets}</p>
                            <p className="exercise-info">{warmupExercise.reps}</p>

22 40 the order of the columns will be: 
Name sets reps weight

23 30 <input className="weight-input" placeholder="N/A" disabled/>
only workouts will have an assigned weight

24 20 we will duplicate the grid we just did, and transform it into workout instead of warmup

we will also change all the warmup information to workout

25 25 we removed the "disabled" keyword of the input, placeholder will be 14

26 00 we will add a button tag with information for the exercise to bot warm and work

27 30 adding command buttons
 <div className="workout-buttons">
                <button>Save & Exit</button>
                <button disabled={true}>Complete</button>
            </div>

the disabled will be true at the moment until we add the jsx

28 40 disabled is default as true, it could be added as false, in case we want it available
