0 00 Now we need our modal

let's check the index.html

0 30 the main.jsx has our app to be rendered, and an element with id of root that renders the div

the div is <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>

0 50 to create the modal, we need the overlay with a similar process

we will create a div "portal" inside the html of div root
  <div id="root"></div>
  <div id="portal"></div>
  <script type="module" src="/src/main.jsx"></script>

it will allows us to overlay our existing app

1 25 we can now fill the modal it will be flexible

we will style it so it will be a wrapper that 

anything it wraps will be taken out context of the original document with the ID of root, and instead it will be rendered out within this div with the id of portal, so inside of the portal overlay

So it will be similar to Layout with its own children contetns which will render out in this new Context

it will have information via props, since the children will NOT be programmatically added

2 20 there are 2 types of props
Attribute style props
Children style props

modal needs to know it will get components

3 00 we will add props and destructure 2 parameters

3 20 you can let the logic to render them to be handled by another component. it cam be the workout card

we will also define what toggles the visibility of the modal
instead of the children, we will pass the attribute style props

3 50 we will destructure these 2 parameters from the props


3 55 first one has a boolean, to show up or not.

It contains information that we need of the exercise

if it is blank, it is false

if it is true, it has the information we need.

5 00 we will return something different from this modal

we have 2 react dependencies, react and react-dom

dom is for Document Object Modal, so we use react-dom for anything related to modals

5 50 import ReactDom from 'react-dom'

6 10 we will use

return ReactDom.createPortal()

its second argument will be the element within which we render this content

we will get the element where it wll be rendered, in this case, from the index.html, <div id="portal"></div>

document.getElementById('portal')

6 45 for the first argument we need to create an html that will render within the secondary argument

7 30 <div className='modal-container'>
            <button />
        </div>

This button will be an underlay

if you click the background, the modals usually go away

that's the behaviour we look for in this modal

this button will be an opaque background that will act as an Ã«xit

8 00 we add <button className='modal-underlay' onClick={handleCloseModal} />

it will contain the logic needed to reset the show exercise description to a blank state

and our react code will recognize, that we do not ned to show the exercise description, for it will have nothing

it will make the modal go away

8 55 we need it to have content

9 30 for the format, we will call .replaceAll method
<h2 className='skill-name'>{name.replaceAll('-', ' ')}</h2>
it will replace all dashes with spaces

in case in some data, there are dashes instead of spaces

10 20 we create a copy of the div and create aparagraph for the description

10 50 now we have to render our component, from within the workout card. it has the description in the first place

we will have a const in workoutcard.jsx of what the modal will look like

11 15 we add 
 const showExerciseDescription = {name: 'na', description: 'des'}
a top of the workoud card function

11 45 we can render the modal below the div of workout-container

Remember to import:
import Modal from "./Modal"

<Modal/> will be enough. It has NO children, but we still communicate information via the style  attribute prop

12 30 this will have the content that we need to show the modal and the description of the exercise

now the other one is handle close modal

we use an arrow function for it

handleCloseModal={()=>{}}

13 25 now we need to create the modal as an overlay


