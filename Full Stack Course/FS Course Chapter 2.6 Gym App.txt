0 00 going to work with index.css

0 24 body tag:
1 rem padding pushes everything in from the sides

100 vh ensures that our page has 100% of the view

0 50 display will be flex

gap 1 rem wil speread all chldren element

1 30 now we wor with 
header, main, footer {
width: 100%; for maximum width of parent element
        max-width: 700px;
    padding: 1rem;
margin: 0 auto; it will distribute any additional space evenly
}

 2 30 it wll be constantly left, we use margin
margin: 0 auto; it will distribute any additional space evenly

3 15 distributin the header

header{
    display: flex;
    flex-direction: column;
    gap: 0.25rem; it allows to spread the content a bit
}

3 45 header h1
width: fit-content;


All children element by default occupy full width

it depletes the gradient, even though the text BROGRAM is small

4 20 
main {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    flex: 1;
}

the flex of 1 is important for the minimumn height of the body element.

5 00 if the body occupies a minimum height of 100% of the view height, the flex: 1 parameteron the main section will ensure that it is as greedy with that space as possible

The main expands to take up as much of that 100% view height as possible, and that conveniently pushes

the footer to the bottom of the page.

5 40 h3, .training-plan-grid {
    padding: 2rem;
}

above each section there will be some spacing

6 20 change the training-grid-plan to training-plan-grid in Grid.jsx


7 10 all the displays at the moment are mobile displays.

It's so much easier to style an application first for the mobile device size.

sizing down is way harder than sizing up, so all the display modifications right now are done small for mobile device, but will be upsized later on

.training-plan-grid{
    display: grid;
    grid-template-columns: repeat(3,minmax(0, 1fr));
    
}

we will use the repeat function for the size of the template columns
the function repeat takes 2 arguments
-3 will be the number of columns
-minmax takes 2 arguments, 0 minimum, and 1fr for 1 fraction maximum. its maximum size will be of 1 fraction total

8 20 this will create an even 3 layout total

8 50 every card has a div 
.plan-card{
    position: relative;
    cursor: pointer;
    flex-shrink: 0;//this means they'dont shrink to a smaller size when they're being constricted together

}

9 30 we will use the class .inactive, which was used for the class in case it was locked 

10 10 we will reduce the opacity of the card and show the no cursor when it is inactive

10 20 we will show the locked card style underneath
it will be absolute so it overlays on the locked card

11 10 
.plan-card-header{
    display: flex;
    gap: 0.5rem;
    align-items: center; where every item seats vertically
justify-content: space-between; it will take all children element and evenly alignt them


}

12 00 the testing element won't let the changes be seen

12 30 p:first-of-type, allows us to only style the first of an elemnt?

.plan-card-header p:first-of-type,
.plan-card-header i {
    font-weight: 600;
    font-size: 0.75rem;
    line-height: 1rem;
    color: var(--color-link);

}

this will change the first paragraph and icons to a blue color

13 20 we change the selected workout to null to see the resutl at the moment

13 25 we will change plan-card with 100% width

13 50 applying style to rules

below main we add
.rule-item {
    display: flex;
    gap: 1rem;
}

14 35 we will add an additional rule to the item inside rule item


.rule-item p:first-of-type{
    min-width: 60px;
}

this will make sure the first of the paragrpah will be aligned by 60px

15 10 With the style of the grid, we can work with the style of the workout card itself

re enable a workout card with a number

15 40 

.workout-container{
    grid-column: span 3 / span 3;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

this will make it so when this card encounters another card, it will force the remained beneath it

it breaks the continuity of the buttons


16 20 styling workout grid to show the contents

.workout-grid {
    display: grid;
    grid-template-columns: repeat(7, minmax(0, 1fr));
    gap: 0.5rem;
    overflow-x: auto;
}

18 50     grid-column: span 3 / span 3; will take 3 out of 3

//it will need some columns that use multiple columns

 overflow-x: auto;

it will allow the user to scroll in the x axis

19 29 
.weight-input {
    grid-column: span 2 / span 2;
}

20 58 last elements to style is the footer
footer {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 4rem 0 2rem 0; 
    
}
padding can figure out, depending on which arguments you p[rovide it, or how many arguments where these paddings are to be allocated

One input equals to all sides

2 inputs is vertical and horizontal

4 is for top, right, bottom and left in that order

22 20 footer can be further styled

22 35 utility focused styles

input:disabled {
    cursor: not-allowed;
    opacity: 0.6;
}
so they're slighty less visible and unable to be used


23 50 making button unusable at the moment
button:help-icon {
    pointer-events: none;
    opacity: 0;
    padding: 0 0.5rem;
    color: var(--boder-secondary);
    border: unset;
    box-shadow: unset;
    transform: unset;
    width: fit-content;
}

the unsets in several options are so any other style applied to other buttons are removed from it, giving it its own personal style

the button becomes unclickable and uninteractable

24 40 we cannot interact with the help button, but we can targt the container of exercise-name and specifically its hover state, and if we are in the hover state, we can activate the button

25 30 you can fiddle with the color of the button

26 00 to stop the hover and shadow interaction
button.help-icon:hover {
    transform: unset;
    box-shadow: unset;
}

27 40
.skill-name {
    text-transform: capitalize;
}

.modal-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vw;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 100;
    padding: 1rem;
}

28 30the modal will be in the middle with the information at the moment

29 00 we want it as an underlay that darkens the screen behind
.modal-underlay {
    position: absolute; // in context to its parent, the modal-container
    inset: 0; it takes the entire space
    background: var(--background-muted);
    opacity: 0.8;
    z-index: 99;
    width: 100%;
    border: none;
    border-radius: 0;
    box-shadow: unset;

}

30 10 working with .modal-underlay:hover


it will make everything be below a slightly opaque screen. it brings attention to what's on top which will be the modal

If you recall we are in the parent container the actual container for the modal we said center all the content.

So all of this content is going to be centered.

So it gets a position of relative.

31 00 working with modal-content

.modal-content {
    position: relative;
    z-index: 101;
    width: 100%;
    margin: 0 auto;
    max-width: 600px;
    max-height: 400px;
    border-radius: var(--boder-radius-large);
    border: 1px solid var(--border-primary);
    background: var(--background-primary);
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;

}

33 40 it stays fixed in the middle

***34 10 any style on a screen that-s min width 640 will override any of the rules of the mobile style we provided above

@media (min-width: 640px) { ... }


33 30 first the body
 body{
        gap: 2rem;
        padding: 2rem 0;
    }
The next thing is going to be the rule item and target the paragraph.


we
That is the first of type p which means that basically that's going to be the little header section.

And then the text alongside.

36 40 the overlay comes when we show the workout  card at the moment in WorkoutCard.jsx
<Modal showExerciseDescription={showExerciseDescription} 
            handleCloseModal={()=>{}}/>

36 50 stylle the plan-card-header

37 50 
@media (min-width: 768px) {
    .training-plan-grid {
        grid-template-columns: repeat(5, minmax(0, 1fr));
    }

    .workout-container {
        grid-column: span 5 / span 5;
    }

}
second breakpoint of size


38 50 this is the way one can work with responsive design
Start small in the design and then get bigger3

disable
<Modal showExerciseDescription={showExerciseDescription} 
            handleCloseModal={()=>{}}/>
to remove modal