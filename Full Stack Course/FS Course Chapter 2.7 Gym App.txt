0 00 adding logic to the app, starting with the modal

we want modal to show up only if the show exercise description contains some data

modal is a conditional rendered component,

we cover it all in curly braces and inside those, parenthesis. 

Then we add a conditional with showExerciseDescription
{showExerciseDescription &&
                (<Modal showExerciseDescription={showExerciseDescription}
                    handleCloseModal={() => { }} />)}

we check the value of , if it is a truth state, it will have something, if not, it will not show up

* 1 30 Rule of thumb inside of react:
whenever you need a variable to be tied to a user interaction, we change it into a react stateful variable instead of a traditional variable.

1 40 we import  useState and change the variable to a stateful varible, with it, react 

change

    const showExerciseDescription = { name: 'na', description: 'des' }

To
   const [showExerciseDescription, setShowExerciseDescription] = useState(null)
with the first being or state immutable variable, and the second one the function to change it

3 10 we will work with the warmup help-icon button and see what exercise needs to be set to that state

we need to give them onClick={() => {}}

3 33 we call the setter function and then we pass the object

onClick={() => {
                                    setShowExerciseDescription({
                                        name: warmupExercise.name,
                                        description: ''
                                    })

                                }}


4 30 the description are in the index.js called exerciseDescription

we need to import the exercise description object
import { exerciseDescriptions } from "../utils"

we need to use the name of the exercise or the warmup to get the description

name: warmupExercise.name,
                                        description: exerciseDescriptions[warmupExercise.name]

it will get the right description using the exact name

with this, the modal will show up with the information of the right exercise

6 00 to remove the modal, with the arrow function or attribute style prop we can set it to null when someone clicks the background modal

when we click on the background, it restarts

it won-t work yet in the exercise part

7 00 we copy the on click attribute and paste it in the workout version

7 30 when we click a card, we should get its workout to show up

8 00 since a user is going to be interacting with the variables, we will need to change the logic of the selectec workout in Grid.jsx

8 50 const [selectedWorkout, setSelectedWorkout] = useState(null) is null, so we have no workout to work with

9 10 we will work here
return (
                    <button className={'card plan-card ' + (isLocked ? 'inactive' : '')} key={workoutIndex}>
                        <div className='plan-card-header'>

9 35 with this, when we click the index, the button will assign the workoutIndex to the Selected Workout and it will show up
onClick={()=>{

                        setSelectedWorkout(workoutIndex)
                    }}

9 55 we want the user to progress thru the workouts, not jump anywhere

we need them to input all of theese weights in workouts, save and complete the wokrout before we allow them to move to the next day

10 05 we need them to input all of the workouts, we will use a locking mechanism, with the isLocked variable

10 30 we will create a variable for user interaction
const completedWorkouts = []

And one for saved workouts. It will be a stateful variable since we will be using it to save their workouts

* 11 45 These saved workouts will be persisted in the LOCAL STORAGE
When the user loads up the site again, we'r egoing to read them from the LOCAL STORAGE 

It will be saved per device, as local storage is per device


12 10 we have 2 buttons. one to save and the other to complete, they're both in the workout card. One to save, and the other to complete


they're in the workout card

the state is in grid, but it will be used in the workout card

12 30 we will define handler functions. complex states require the handling functions

13 00 one needs to know the state of the workout card in the grid, because it is where the cards are locked

Parent components can pass states down, but cannot get back states from down.

the state is defined here, then passed down to the child component, the workout card

the first function will handle the workout and the moment, then save their progress

the second function will let them complete the workout and go to the next one

14 20 it allows each function to be modular

each function does one thing

15 00 handling data:
the inputs in workout card are tied to the weight exercises

grid doesn't need the information of the card, as that information 
isn't needed when showing stuff in the grid.

a state will manage these input values

15 40 in workout card we create a new stateful variable
  const [weights, setWeights] = useState( savedWeights || {})

with this, it won't break in case there is nothing.

This is a state passed down by the parent

16 50 if there's information to be show, it will be populated immediately

exercise key
weight as associated value

17 00 function to handle the modification of this data
we will grab the title and weight of the exercise, and we will spread the weight array into pieces to know

18 30 using [] we can access the dynamic key, which is whatever the title is at the moment

and we will assign the weight value of the key.

if the  exercise exist, this line will overwrite it or create it
[title]: weight

it will create the new weight

18 44 beneath that we will pass the new object

we will work with the inputs in the workouts

20 00 everytime we change the input, we need to pass these states to the value key, and pass the most recent data
In workout
<input value={} onChange={()=>{}} 
                            className="weight-input" placeholder="14" />

value={weights[warmupExercise.name]} is the key to access within the weights dictionary to find the value assoaciated with that exercise name

20 50 it might now find this exercise, in the case it is undefined, we will use a backup of ||''

it is the value the input reads

when  we add a value we call the onChange

21 30 we will use "e" variable, to ensure it is the event, that contains the value that is being entered into the input


22 05 This will lookup the value within the event which has been the information just entered

<input value={weights[warmupExercise.name] || ''} onChange={(e) => {
                                handleAddWeight(warmupExercise.name, e.target.value)

                            }}

24 10 when a user saves a workout we have to save these weights, alongside all these other weights

we have these functions that receive the data



    function handleSave(index,data){
        //save to local storage and modify the saved workouts state
    }

    function handleComplete(index,data){
        // complete workout ( modofiy the completed status)

    }

we have these functions for it

for the save and exit button we add 
 onClick={() => {

                    handleSave(workoutIndex, { weights })
                }}

25 40 we'll change the workoutIndex in workout.map to wIndex, to avoid duplication

workoutIndex is for the entire section

27 20 we add handleSave and handleComplete to the props that we receive

we will pass them down

the prop handleSave will receive the function {handleSave}

28 00  Now we need to define the handleSave and handleComplete function in Grid
